@page "/change-password"

@using System.Security.Claims

@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRunTime
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider
<div class="container">
    <h1>
        Đổi mật khẩu
    </h1>
    <hr />

    <div class="row d-flex justify-content-center">
        <div class="col-sm-4">
            @if (!string.IsNullOrWhiteSpace(_message))
            {
                <p class="text-success">
                    @_message
                </p>
                <hr />
            }
            @if (!string.IsNullOrWhiteSpace(_error))
            {
                <p class="text-danger fw-bold">
                    @_error
                </p>
                <hr />
            }
            @if (_userId is not null)
            {
                <EditForm Model="Model" Enhance FormName="change-password" OnValidSubmit="ChangePassAsync">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">Mật khẩu hiện tại</label>
                        <InputText type="password" @bind-Value="Model.CurrentPassword" class="form-control" placeholder="Nhập mật khẩu hiện tại" />
                        <ValidationMessage For="() => Model.CurrentPassword" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Mật khẩu mới</label>
                        <InputText type="password" @bind-Value="Model.NewPassword" class="form-control" placeholder="Nhập mật khẩu mới" />
                        <ValidationMessage For="() => Model.NewPassword" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Xác nhận mật khẩu mới</label>
                        <InputText type="password" @bind-Value="Model.ConfirmNewPassword" class="form-control" placeholder="Xác nhận mật khẩu mới" />
                        <ValidationMessage For="() => Model.ConfirmNewPassword" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary btn-sm" disabled="@_isProcessing">
                            @(_isProcessing ? "Đang tải.." : "Thay đổi mật khẩu")</button>
                        
                    </div>
                </EditForm>
            }

        </div>
    </div>
</div>


@code {
    private string? _error;
    private string? _message;
    private string? _userId;
    private bool _isProcessing;

    [SupplyParameterFromForm]
    private ChangePassModel Model { get; set; } = new();

    [CascadingParameter]
    private HttpContext httpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState is null || authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
        _userId = authState.User.GetUserId()!;
    }

    public async Task ChangePassAsync()
    {
        _message = _error = null;
        _isProcessing = true;
        var user = httpContext.User.GetUserId();
        await Task.Delay(1500);
        var result = await UserService.ChangePasswordAsync(Model, user);
        if (!result.IsSuccess)
        {
            _error = result.ErrorMessage;
        }
        else
        {
            _message = "Thay đổi mật khẩu thành công";
            
        }
        _isProcessing = false;
    }
}
