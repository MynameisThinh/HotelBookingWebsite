@page "/staff-admin/manage-room-types/news"
@page "/staff-admin/manage-room-types/{roomTypeIdRaw:int?}/edit"
@using HotelBookingWebsite.Data.Entities
@using System.Security.Claims
@using static HotelBookingWebsite.Models.RoomTypeSaveModel

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject AuthenticationStateProvider AuthStateProvider
@inject ISideOptionService SideOptionService
@inject IRoomTypeService RoomTypeService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment

<div class="container">
    <h1>@(RoomTypeId.HasValue ? "Cập nhật" : "Tạo") loại phòng</h1>
    <hr />
    <EditForm Model="Model"  OnValidSubmit="SaveRoomTypeAsync">
        <DataAnnotationsValidator/>
        <div class="row">       
            <div class="col-sm-6">
                <div class="mb-3">
                    <label class="form-label">Tên: </label>
                    <InputText @bind-Value="Model.Name" class="form-control" placeholder="Nhập loại phòng" />
                    <ValidationMessage For="() => Model.Name" class="text-danger" />

                </div>
                <div class="mb-3">
                    <label class="form-label">Giá: </label>
                    <InputNumber @bind-Value="Model.Price" class="form-control" placeholder="Giá" />
                    <ValidationMessage For="() => Model.Price" class="text-danger" />

                </div>
                <div class="mb-3">
                    <label class="form-label">Số lượng người lớn: </label>
                    <InputNumber @bind-Value="Model.MaxAdult" class="form-control" placeholder="SL Người lớn" />
                    <ValidationMessage For="() => Model.MaxAdult" class="text-danger" />

                </div>
                <div class="mb-3">
                    <label class="form-label">Số lượng trẻ em: </label>
                    <InputNumber @bind-Value="Model.MaxChildren" class="form-control" placeholder="SL Trẻ em" />
                    <ValidationMessage For="() => Model.MaxChildren" class="text-danger" />

                </div>
                <div class="mb-3">
                    <label class="form-label">Mô tả: </label>
                    <InputTextArea @bind-Value="Model.Description" class="form-control" placeholder="Mô tả" rows="5" />
                    <ValidationMessage For="() => Model.Description" class="text-danger" />

                </div>
                
            </div>
            <div class="col-sm-6">
                <div class="d-flex flex-column" style="height:100%">
                    <div class="img-wrapper flex-grow-1">
                        @if (!string.IsNullOrWhiteSpace(_imageUrl))
                        {
                            <img src="@_imageUrl" class="img-fluid" />

                        }
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Hình ảnh: </label>
                        <InputFile OnChange="OnImageSelectAsync" class="form-control" />

                    </div>
                </div>
            </div>
            <div class="col-sm-12 d-flex justify-content-between">
                @foreach (var a in _sideOption)
                {
                    <div class="mb-3 d-flex justify-content-center align-items-center">
                        <label>
                            <InputCheckbox @bind-Value="a.IsChecked" />
                            <span>@a.Name</span>
                            <InputNumber @bind-Value="a.Unit" class="form-control form-control-sm" placeholder="Giá trị" />
                        </label>
                    </div>
                }
            </div>

            <div class="col-sm-6">
                @if (string.IsNullOrWhiteSpace(_errorMessage))
                {
                    <p class="text-danger">@_errorMessage</p>
                }
            </div>
            <div class="col-sm-6">
                <div class="d-grid">
                    <button type="submit" class="btn btn-primary">Lưu</button>
                </div>
            </div>
        </div>
        
    </EditForm>
</div>

@code {
    [Parameter]
    public int? RoomTypeIdRaw {get;set;}

    private short? RoomTypeId => RoomTypeIdRaw > 0 
                                 ? (short.TryParse(RoomTypeIdRaw.ToString(),out var roomTypeId) ? roomTypeId : null)
                                 : null;

    private RoomTypeSaveModel Model { get; set; } = new();
    private SideOptionSelectionModel[] _sideOption = [];
    private string? _errorMessage = null;
    private string? _imageUrl = null;
    private IBrowserFile? _image;

    protected override async Task OnInitializedAsync()
    {
        var sideOption = await SideOptionService.GetSideOptionsAsync();

        if (RoomTypeId.HasValue)
        {
            var roomType = await RoomTypeService.GetRoomTypeToEditAsync(RoomTypeId.Value);
            if(roomType is null)
            {
                NavigationManager.NavigateTo("/staff-admin/manage-room-types", replace: true);
                return;
            }
            Model = roomType;
            _imageUrl = Model.Image;
        }
        _sideOption = sideOption.Select(a =>
        {
            var existingSideOptions = Model.RoomTypes.FirstOrDefault(ma => ma.Id == a.Id);
            return new SideOptionSelectionModel(a.Id, a.Name, existingSideOptions is not null, existingSideOptions?.Unit);
        }).ToArray();
    }

    private async Task OnImageSelectAsync(InputFileChangeEventArgs e)
    {

        using var imageStream = e.File.OpenReadStream();
        using MemoryStream memoryStream = new MemoryStream();
        await imageStream.CopyToAsync(memoryStream);
        var base64ImgData = Convert.ToBase64String(memoryStream.ToArray());
        var extension = Path.GetExtension(e.File.Name)[1..];

        _imageUrl = $"data:image/{extension};base64,{base64ImgData}";
        _image = e.File;
    }

    private async Task<string?> SaveImageAsync()
    {
        var extension = Path.GetExtension(_image!.Name);
        var imageName = $"room-type-img-{Guid.NewGuid()}{extension}";
        var folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "images", "room-types");
        Directory.CreateDirectory(folderPath);

        var fullFilePath = Path.Combine(folderPath, imageName);
        try
        {
            await using FileStream fileStream = new(fullFilePath, FileMode.Create);
            using var imageStream = _image.OpenReadStream();
            await imageStream.CopyToAsync(fileStream);
            return $"/images/room-types/{imageName}";
        }
        catch(Exception _ex)
        {
            _errorMessage = $"Lỗi khi thêm hình ảnh. {_ex.Message}";
            return null;
        }
    }

    private void DeleteImage(string imageUrl)
    {
        var imagePath = imageUrl.Replace("/", "\\");
        var fullFilePath = Path.Combine(WebHostEnvironment.WebRootPath, imagePath);
        if (File.Exists(fullFilePath))
        {
            try
            {
                File.Delete(fullFilePath);
            }
            catch(Exception e)
            {
                _errorMessage = e.Message.ToString();
            }
        }
    }
    private async Task SaveRoomTypeAsync()
    {
        _errorMessage = null;
        if(Model.Id == 0 && _image is null)
        {
            _errorMessage = "Yêu cầu thêm hình ảnh";
            return;
        }
        Model.RoomTypes = _sideOption.Where(a => a.IsChecked)
                                     .Select(a => new RoomTypeSaveModel.RoomTypeSideOptionSaveModel(a.SideOptionId, a.Unit))
                                     .ToArray();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
        {
            var loginPageUrl = NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = NavigationManager.Uri });
            NavigationManager.NavigateTo(loginPageUrl);
            return;
        }
        var userId = authState.User.GetUserId();


        try
        {
            string? existingImgUrl = null;
            if(_image is not null)
            {
                existingImgUrl = Model.Image;
                var imageUrl = await SaveImageAsync();
                if (imageUrl is null)
                    return;
                Model.Image = imageUrl;
            }
           
            var result = await RoomTypeService.SaveRoomTypeAsync(Model, userId);
            if (result.IsSuccess)
            {
                if (!string.IsNullOrWhiteSpace(existingImgUrl))
                {
                    DeleteImage(existingImgUrl);
                }
                NavigationManager.NavigateTo("staff-admin/manage-room-types");
                return;
            }
            _errorMessage = result.ErrorMessage ?? "Lỗi khi lưu loại phòng";
        }
        catch(Exception e)
        {
            _errorMessage = e.Message.ToString();
        }
    }

    private class SideOptionSelectionModel
    {
        public SideOptionSelectionModel(int id, string name, bool isChecked, int? unit) =>
            (SideOptionId, Name, IsChecked, Unit) = (id, name, isChecked, unit);
        public int SideOptionId { get; set; }
        public string Name { get; set; }
        public bool IsChecked { get; set; }
        public int? Unit { get; set; }
    }
    
}

<style>
    .footer {
        margin-top: 0 !important;
    }
</style>
